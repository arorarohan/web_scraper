from bs4 import BeautifulSoup
import requests
from openai import OpenAI

class CNATop5:
    def __init__(self):
        #setting up instance variables
        self.website = requests.get("https://www.channelnewsasia.com/")
        self.soup = BeautifulSoup(self.website.text, 'html.parser')
        self.client = OpenAI()

        #core program
        #not in the loop as we don't want to keep fetching new results from the website
        self.get_top5()
        while True:
            self.display_top5()
            self.get_action()


    def get_action(self):
        selection = input("\n Choose an article to summarize (1-5):\n")

        #filter out invalid selections
        while selection not in ['1','2','3','4','5']:
            print("enter a valid selection!")
            return self.get_action()
        
        #convert to an integer
        selection = int(selection)

        #for now we just get fulltext, later on we will change this to get the summary thereafter and return that instead
        text = self.get_fulltext(selection)

        return self.summarize_text(text)


    def get_top5(self):
        #this gives us all the large headlines
        headlines = self.soup.find_all('a', attrs= {'class':'h3__link list-object__heading-link'})

        #the next task is to number them, let's use a dictionary and save it as an instance variable.
        self.top5_dict = {}
        for num, line in zip(range(1,6), headlines):
            self.top5_dict[num] = line
        
        return
        
    
    #we are seperating out the display method because we don't want to create a new top 5 list every time we want to display it.
    def display_top5(self):
        print("Below are the top 5 articles on CNA right now!\n")

        #list splitting is to remove whitespace!
        for num, line in self.top5_dict.items():
            print(f"{str(num)}. {line.text[7:len(line)-4]}")
        
        return
    
    
    #a helper method to get the text from a top5 entry
    def get_fulltext(self,idx):
        #filter out invalid indices
        if idx not in self.top5_dict.keys():
            return ''
        
        #if we're here, we have a valid index, so we grab the headline's full form
        headline = self.top5_dict[idx]
        
        #href has a relative url, we add the front part to make it absolute.
        url = "https://www.channelnewsasia.com" + (headline.attrs['href'])
        
        #now we fetch the specific page
        page = requests.get(url)
        page_soup = BeautifulSoup(page.text, 'html.parser')
        fulltext_with_tags = page_soup.find_all('p',attrs = {'class':''})

        #take only the text, and remove the last few "paragraphs which are just generic footers from the website and not part of the article"
        fulltext_without_tags = [item.text for item in fulltext_with_tags[:-4]]

        #turn the list into a string!
        fulltext_str = "\n".join(fulltext_without_tags)
        
        return fulltext_str
    

    #given the text of an article, we are going to generate a summary using gpt-3.5-turbo
    def summarize_text(self,text):

        input_message = "Summarize the following text: \n" + text

        summary = self.client.chat.completions.create(
            model = 'gpt-3.5-turbo',
            messages = [
                {'role':'system', 'content':'you are a tool that generates excellent summaries of text when asked to, and without saying anything else'},
                {'role':'user', 'content': input_message}
            ]
        
        )

        print("Summary generated by GPT-3.5:")
        print(summary.choices[0].message.content + "\n")